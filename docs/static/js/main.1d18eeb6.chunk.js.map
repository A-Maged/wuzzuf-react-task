{"version":3,"sources":["styles/Global.ts","pages/Home/style.ts","app/config.ts","app/state/app/state.ts","app/state/app/actions.ts","app/state/location/state.ts","app/state/location/actions.ts","app/state/location/effects.ts","app/state/index.ts","app/state/MakeStateProvider.tsx","pages/Home/components/LocationForm/style.ts","components/OptionsEmpy.tsx","components/OptionsFallback.tsx","pages/Home/useFilter.ts","pages/Home/components/LocationForm/SelectArea.tsx","pages/Home/components/LocationForm/SelectCity.tsx","pages/Home/components/LocationForm/SelectCountry.tsx","pages/Home/components/LocationForm/types.ts","pages/Home/components/LocationForm/state.ts","pages/Home/components/LocationForm/index.tsx","pages/Home/index.tsx","pages/Welcome/style.ts","pages/Welcome/index.tsx","Routes.tsx","components/Header/style.ts","components/SunIcon.tsx","components/Header/index.tsx","styles/themes/dark.ts","styles/themes/light.ts","index.tsx","App.tsx"],"names":["globalStyles","theme","css","colors","text","backgroundLight","container","state","isLoading","isDarkTheme","JSON","parse","window","localStorage","getItem","config","startLoading","app","stoptLoading","toggleDarkTheme","isDark","setItem","stringify","countries","cities","areas","getCountries","a","effects","location","allCountries","getCities","countryId","allCities","getAreas","cityId","allAreas","resetCities","fetch","response","json","data","reduce","all","country","id","city","namespaced","useStore","createHook","createStateHook","useActions","createActionsHook","StateProvider","createEffectsHook","createReactionHook","overmind","children","value","MakeStateProvider","createOvermind","devtools","selectStyles","OptionsEmpy","style","textAlign","padding","OptionsFallback","useFilter","getComparisonValue","useState","filteredData","setFilteredData","resetFilterFn","useEffect","filterFn","filterStr","filtered","Object","entries","forEach","key","item","toLowerCase","indexOf","Option","SelectArea","selectedArea","isLoadingAreas","dispatch","props","appState","area","attributes","name","Options","values","map","showSearch","filterOption","size","placeholder","onChange","areaId","type","onSearch","onSelect","notFoundContent","SelectCity","selectedCity","isLoadingCities","onBlur","field","SelectCountry","isLoadingCountries","selectedCountry","actions","TouchedFields","FieldsErrorMsgs","initState","touched","fields","locationReducer","action","newState","LocationForm","useReducer","hasAreas","includes","countryHasAreas","errors","getOwnPropertyNames","fieldValue","calculateErrors","finally","length","color","Home","Welcome","path","component","exact","icon","SunIcon","xmlns","width","height","viewBox","fill","x","y","transform","d","Header","background","shadow","to","onClick","faMoon","ReactDOM","render","StrictMode","darkTheme","lightTheme","useTheme","styles","Routes","document","getElementById"],"mappings":"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","file":"static/js/main.1d18eeb6.chunk.js","sourcesContent":["import { css } from '@emotion/core';\nimport { TTheme } from './themes';\n\nexport default function globalStyles(theme: TTheme) {\n  return css`\n    html {\n      height: 100%;\n    }\n\n    body {\n      height: 100%;\n      color: ${theme.colors.text};\n      background: ${theme.colors.backgroundLight};\n    }\n\n    #root {\n      height: 100%;\n    }\n\n    a,\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6 {\n      color: inherit;\n    }\n  `;\n}\n","import { css } from '@emotion/core';\n\nexport const container = css`\n  height: calc(100% - 50px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","export default {\n  baseUrl: 'http://46.101.108.59/api',\n  themeStorageKey: 'is_dark',\n};\n","import config from '@Config';\nexport type State = {\n  isLoading: boolean;\n  isDarkTheme: boolean;\n};\n\nexport const state: State = {\n  isLoading: false,\n  isDarkTheme: JSON.parse(\n    window.localStorage.getItem(config.themeStorageKey) || 'false'\n  ),\n};\n","import { Action } from 'overmind';\nimport config from '@Config';\n\nexport const startLoading: Action = ({ state }) => {\n  state.app.isLoading = true;\n};\n\nexport const stoptLoading: Action = ({ state }) => {\n  state.app.isLoading = false;\n};\n\nexport const toggleDarkTheme: Action = ({ state }) => {\n  const isDark = !state.app.isDarkTheme;\n  \n  state.app.isDarkTheme = isDark;\n\n  window.localStorage.setItem(\n    config.themeStorageKey,\n    JSON.stringify(isDark)\n  );\n};\n","import { TAllAreas } from '@Entities/Area';\nimport { TAllCities } from '@Entities/City';\nimport { TAllCountries } from '@Entities/Country';\n\nexport type State = {\n  countries: TAllCountries;\n  cities: TAllCities;\n  areas: TAllAreas;\n};\n\nexport const state: State = {\n  countries: {},\n  cities: {},\n  areas: {},\n};\n","import { ICity } from '@Entities/City';\nimport { ICountry } from '@Entities/Country';\nimport { Action, AsyncAction } from 'overmind';\n\nexport const getCountries: AsyncAction = async ({ state, effects }) => {\n  const allCountries = await effects.location.getCountries();\n\n  state.location.countries = allCountries;\n};\n\nexport const getCities: AsyncAction<ICountry['id']> = async (\n  { state, effects },\n  countryId: ICountry['id']\n) => {\n  const allCities = await effects.location.getCities(countryId);\n\n  state.location.cities = allCities;\n};\n\ntype TGetAreasArgs = {\n  countryId: ICountry['id'];\n  cityId: ICity['id'];\n};\nexport const getAreas: AsyncAction<TGetAreasArgs> = async (\n  { state, effects },\n  { countryId, cityId }\n) => {\n  const allAreas = await effects.location.getAreas({ countryId, cityId });\n\n  state.location.areas = allAreas;\n};\n\nexport const resetCities: Action = ({ state }) => {\n  state.location.cities = {};\n};\n","import { ICity, TAllCities } from '@Entities/City';\nimport { ICountry, TAllCountries } from '@Entities/Country';\nimport { TAllAreas } from '@Entities/Area';\nimport config from '@Config';\n\nexport async function getCountries(): Promise<TAllCountries> {\n  const response = await fetch(`${config.baseUrl}/countries`);\n\n  let allCountries = await response.json();\n\n  return allCountries.data.reduce((all: TAllCountries, country: ICountry) => {\n    all[country.id] = country;\n\n    return all;\n  }, {});\n}\n\nexport async function getCities(\n  countryId: ICountry['id']\n): Promise<TAllCities> {\n  const response = await fetch(`${config.baseUrl}/country/${countryId}/city`);\n\n  let allCities = await response.json();\n\n  return allCities.data.reduce((all: TAllCities, city: ICity) => {\n    all[city.id] = city;\n\n    return all;\n  }, {});\n}\n\ntype TGetAreasArgs = {\n  countryId: ICountry['id'];\n  cityId: ICity['id'];\n};\nexport async function getAreas({\n  countryId,\n  cityId,\n}: TGetAreasArgs): Promise<TAllAreas> {\n  const response = await fetch(\n    `${config.baseUrl}/country/${countryId}/city/${cityId}/area`\n  );\n\n  let allCities = await response.json();\n\n  return allCities.data.reduce((all: TAllCities, city: ICity) => {\n    all[city.id] = city;\n\n    return all;\n  }, {});\n}\n","import { IConfig, createOvermind } from 'overmind';\nimport { namespaced } from 'overmind/config';\nimport {\n  createHook,\n  createStateHook,\n  createActionsHook,\n  createEffectsHook,\n  createReactionHook,\n} from 'overmind-react';\n\nimport * as app from './app';\nimport * as location from './location';\nimport MakeStateProvider from './MakeStateProvider';\n\nexport const config = namespaced({\n  app,\n  location,\n});\n\ndeclare module 'overmind' {\n  // eslint-disable-next-line @typescript-eslint/no-empty-interface\n  interface Config\n    extends IConfig<{\n      state: typeof config.state;\n      actions: typeof config.actions;\n      effects: typeof config.effects;\n    }> {}\n  // Due to circular typing we have to define an\n  // explicit typing of state, actions and effects since\n  // TS 3.9\n}\n\nexport const useOvermind = createHook<typeof config>();\nexport const useStore = createStateHook<typeof config>();\nexport const useActions = createActionsHook<typeof config>();\nexport const useEffects = createEffectsHook<typeof config>();\nexport const useReaction = createReactionHook<typeof config>();\n\nconst overmind = createOvermind(config, {\n  devtools: false, // defaults to 'localhost:3031'\n});\n\nexport const StateProvider = MakeStateProvider({ overmind });\n","import React from 'react';\nimport { Provider } from 'overmind-react';\n\nexport default function MakeStateProvider({ overmind }: any) {\n  return function StateProvider({ children }: { children: any }) {\n    return <Provider value={overmind}>{children}</Provider>;\n  };\n}\n","import { css } from '@emotion/core';\n\nexport const selectStyles = css`\n  width: 300px;\n\n  .ant-select-selector {\n    background-color: #f5f5f5 !important;\n  }\n`;\n","import React from 'react';\n\nexport default function OptionsEmpy() {\n  return (\n    <div\n      style={{\n        textAlign: 'center',\n        padding: '10px',\n      }}\n    >\n      No Options\n    </div>\n  );\n}\n","import React from 'react';\nimport { Spin } from 'antd';\n\nexport default function OptionsFallback() {\n  return (\n    <div\n      style={{\n        textAlign: 'center',\n        padding: '10px',\n      }}\n    >\n      <Spin />\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\n\ntype TUseFilterReturn<T> = {\n  filteredData: T;\n  filterFn: (filterStr: string) => void;\n  resetFilterFn: () => void;\n};\n\n// TODO: make it compare/handle different types\n/* Manage & Filter a list<object> properties with a String */\nexport default function useFilter<T>(\n  data: T,\n  getComparisonValue: (item: any) => string\n): TUseFilterReturn<T> {\n  const [filteredData, setFilteredData] = useState(data);\n\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  function filterFn(filterStr: string) {\n    if (!filterStr) {\n      resetFilterFn();\n      return;\n    }\n\n    //TODO: replace any with the correct type\n    let filtered: any = {};\n\n    Object.entries(data).forEach(([key, item]) => {\n      let foundSimilarCountry = getComparisonValue(item)\n        .toLowerCase()\n        .indexOf(filterStr.toLowerCase());\n\n      if (foundSimilarCountry !== -1) {\n        filtered[key] = item;\n      }\n    });\n\n    setFilteredData(filtered);\n  }\n\n  function resetFilterFn() {\n    setFilteredData(data);\n  }\n\n  return { filterFn, resetFilterFn, filteredData };\n}\n","import React from 'react';\nimport { Select } from 'antd';\n\nimport { useStore } from '@State';\nimport { selectStyles } from './style';\nimport { IArea, TAllAreas } from '@Entities/Area';\nimport OptionsEmpy from '@Components/OptionsEmpy';\nimport OptionsFallback from '@Components/OptionsFallback';\nimport useFilter from '../../useFilter';\nimport { TLocationFormDispatch } from './types';\n\nconst { Option } = Select;\n\ntype TProps = {\n  dispatch: TLocationFormDispatch;\n  selectedArea: IArea | null;\n  isLoadingAreas: boolean;\n  [key: string]: any;\n};\n\nexport default function SelectArea({\n  selectedArea,\n  isLoadingAreas,\n  dispatch,\n  ...props\n}: TProps) {\n  const appState = useStore();\n\n  let { filteredData, filterFn, resetFilterFn } = useFilter<TAllAreas>(\n    appState.location.areas,\n    (area: IArea) => area.attributes.name\n  );\n\n  function onAreaChange(areaId: string) {\n    let selectedArea = appState.location.areas[areaId];\n\n    dispatch({ type: 'select-area', area: selectedArea });\n  }\n\n  const Options = Object.values(filteredData).map((area: IArea) => (\n    <Option key={area.id} value={area.id}>\n      {area.attributes.name}\n    </Option>\n  ));\n\n  return (\n    <Select\n      showSearch\n      filterOption={false}\n      size=\"large\"\n      css={selectStyles}\n      placeholder=\"Select City\"\n      onChange={onAreaChange}\n      onSearch={filterFn}\n      onSelect={resetFilterFn}\n      value={selectedArea?.id}\n      notFoundContent={isLoadingAreas ? <OptionsFallback /> : <OptionsEmpy />}\n      {...props}\n    >\n      {Options}\n    </Select>\n  );\n}\n","import React from 'react';\n\nimport { useStore } from '@State';\nimport { ICity, TAllCities } from '@Entities/City';\nimport { selectStyles } from './style';\nimport OptionsEmpy from '@Components/OptionsEmpy';\nimport OptionsFallback from '@Components/OptionsFallback';\nimport { Select } from 'antd';\nimport useFilter from '../../useFilter';\nimport { TLocationFormDispatch } from './types';\n\nconst { Option } = Select;\n\ntype Props = {\n  dispatch: TLocationFormDispatch;\n  selectedCity: ICity | null;\n  isLoadingCities: boolean;\n  [key: string]: any;\n};\n\nexport default function SelectCity({\n  dispatch,\n  selectedCity,\n  isLoadingCities,\n  ...props\n}: Props) {\n  const appState = useStore();\n\n  let { filteredData, filterFn, resetFilterFn } = useFilter<TAllCities>(\n    appState.location.cities,\n    (city: ICity) => city.attributes.name\n  );\n\n  function onCityChange(cityId: string) {\n    let selectedCity = appState.location.cities[cityId];\n\n    dispatch({ type: 'select-city', city: selectedCity });\n\n    dispatch({ type: 'reset-area' });\n  }\n\n  function onBlur() {\n    dispatch({ type: 'touched', field: 'city', value: true });\n  }\n\n  function onSelect() {\n    resetFilterFn();\n  }\n\n  const Options = Object.values(filteredData).map((city: ICity) => (\n    <Option key={city.id} value={city.id}>\n      {city.attributes.name}\n    </Option>\n  ));\n\n  return (\n    <Select\n      showSearch\n      filterOption={false}\n      size=\"large\"\n      css={selectStyles}\n      placeholder=\"Select City\"\n      onChange={onCityChange}\n      onSearch={filterFn}\n      onSelect={onSelect}\n      onBlur={onBlur}\n      value={selectedCity?.id}\n      notFoundContent={isLoadingCities ? <OptionsFallback /> : <OptionsEmpy />}\n      {...props}\n    >\n      {Options}\n    </Select>\n  );\n}\n","import React from 'react';\nimport { Select } from 'antd';\n\nimport { useActions, useStore } from '@State';\nimport { ICountry, TAllCountries } from '@Entities/Country';\nimport OptionsEmpy from '@Components/OptionsEmpy';\nimport OptionsFallback from '@Components/OptionsFallback';\nimport useFilter from '../../useFilter';\nimport { TLocationFormDispatch } from './types';\nimport { selectStyles } from './style';\n\nconst { Option } = Select;\n\ntype TProps = {\n  dispatch: TLocationFormDispatch;\n  isLoadingCountries: boolean;\n  selectedCountry: ICountry | null;\n  [key: string]: any;\n};\n\nexport default function SelectCountry({\n  dispatch,\n  isLoadingCountries,\n  selectedCountry,\n  ...props\n}: TProps) {\n  const appState = useStore();\n  const actions = useActions();\n\n  let { filteredData, filterFn, resetFilterFn } = useFilter<TAllCountries>(\n    appState.location.countries,\n    (country: ICountry) => country.attributes.name\n  );\n\n  function onCountryChange(countryId: string) {\n    let selectedCountry = appState.location.countries[countryId];\n\n    dispatch({ type: 'reset-city' });\n\n    dispatch({ type: 'select-country', country: selectedCountry });\n\n    actions.location.resetCities();\n  }\n\n  function onBlur() {\n    dispatch({\n      type: 'touched',\n      field: 'country',\n      value: true,\n    });\n  }\n\n  const Options = Object.values(filteredData).map((country: ICountry) => (\n    <Option key={country.id} value={country.id}>\n      {country.attributes.name}\n    </Option>\n  ));\n\n  return (\n    <Select\n      showSearch\n      filterOption={false}\n      size=\"large\"\n      css={selectStyles}\n      value={selectedCountry?.id}\n      onChange={onCountryChange}\n      onSearch={filterFn}\n      onSelect={resetFilterFn}\n      onBlur={onBlur}\n      notFoundContent={\n        isLoadingCountries ? <OptionsFallback /> : <OptionsEmpy />\n      }\n      placeholder=\"Select Country\"\n      {...props}\n    >\n      {Options}\n    </Select>\n  );\n}\n","import { Dispatch } from 'react';\nimport { ICountry } from '@Entities/Country';\nimport { ICity } from '@Entities/City';\nimport { IArea } from '@Entities/Area';\n\nexport enum TouchedFields {\n  country = 'country',\n  city = 'city',\n}\n\nexport enum FieldsErrorMsgs {\n  country = 'Please select a country',\n  city = 'Please select a city',\n}\n\nexport type LocationFormAction =\n  | { type: 'loading-countries'; value: boolean }\n  | { type: 'loading-cities'; value: boolean }\n  | { type: 'loading-areas'; value: boolean }\n  | { type: 'select-country'; country: ICountry | null }\n  | { type: 'select-city'; city: ICity | null }\n  | { type: 'select-area'; area: IArea | null }\n  | { type: 'reset-city' }\n  | { type: 'reset-area' }\n  | { type: 'touched'; field: keyof typeof TouchedFields; value: boolean };\n\nexport type TLocationFormDispatch = Dispatch<LocationFormAction>;\n\nexport type TLocationFormState = {\n  isLoadingCountries: boolean;\n  isLoadingCities: boolean;\n  isLoadingAreas: boolean;\n  touched: { [key in TouchedFields]: boolean };\n  fields: {\n    country: ICountry | null;\n    city: ICity | null;\n    area: IArea | null;\n  };\n};\n","import {\n  FieldsErrorMsgs,\n  LocationFormAction,\n  TLocationFormState,\n  TouchedFields,\n} from './types';\n\nexport const initState: TLocationFormState = {\n  isLoadingCountries: false,\n  isLoadingCities: false,\n  isLoadingAreas: false,\n  touched: {\n    country: false,\n    city: false,\n  },\n  fields: {\n    country: null,\n    city: null,\n    area: null,\n  },\n};\n\nexport function locationReducer(\n  state: TLocationFormState,\n  action: LocationFormAction\n): TLocationFormState {\n  let newState = { ...state };\n\n  switch (action.type) {\n    case 'loading-countries':\n      newState.isLoadingCountries = action.value;\n      break;\n\n    case 'loading-cities':\n      newState.isLoadingCities = action.value;\n      break;\n\n    case 'loading-areas':\n      newState.isLoadingAreas = action.value;\n      break;\n\n    case 'select-country':\n      newState.fields.country = action.country;\n      break;\n\n    case 'select-city':\n      newState.fields.city = action.city;\n      break;\n\n    case 'select-area':\n      newState.fields.area = action.area;\n      break;\n\n    case 'reset-city':\n      newState.fields.city = null;\n      break;\n\n    case 'reset-area':\n      newState.fields.area = null;\n      break;\n\n    case 'touched':\n      newState.touched[action.field] = action.value;\n  }\n\n  return newState;\n}\n\nexport function countryHasAreas(fields: TLocationFormState['fields']) {\n  const COUNTRIES_WITH_AREAS = ['egypt'];\n\n  return (\n    fields.country &&\n    fields.city &&\n    COUNTRIES_WITH_AREAS.includes(\n      fields.country?.attributes.name.toLowerCase() || ''\n    )\n  );\n}\n\nexport function calculateErrors(\n  touched: TLocationFormState['touched'],\n  fields: { [key in TouchedFields]: any }\n) {\n  let errors: any = {};\n\n  let fieldNames = Object.getOwnPropertyNames(fields);\n\n  (fieldNames as Array<keyof TLocationFormState['touched']>).forEach((name) => {\n    let fieldValue = fields[name];\n\n    // TODO: support more usecases\n    // TODO: coercion problem if fieldValue is 0\n    if (touched[name] && !fieldValue) {\n      errors[TouchedFields[name]] = FieldsErrorMsgs[name];\n    }\n  });\n\n  return errors;\n}\n","import React, { useEffect, useReducer } from 'react';\n\nimport SelectArea from './SelectArea';\nimport SelectCity from './SelectCity';\nimport SelectCountry from './SelectCountry';\nimport { useActions } from '@State';\nimport {\n  calculateErrors,\n  initState,\n  locationReducer,\n  countryHasAreas,\n} from './state';\n\nexport default function LocationForm() {\n  const [state, dispatch] = useReducer(locationReducer, initState);\n  const actions = useActions();\n  const hasAreas = countryHasAreas(state.fields);\n  const errors = calculateErrors(state.touched, state.fields);\n\n  useEffect(\n    function loadCountires() {\n      dispatch({ type: 'loading-countries', value: true });\n\n      actions.location.getCountries().finally(() => {\n        dispatch({ type: 'loading-countries', value: false });\n      });\n    },\n    [actions.location]\n  );\n\n  useEffect(\n    function loadCities() {\n      if (!state.fields.country) return;\n\n      dispatch({ type: 'loading-cities', value: true });\n\n      actions.location.getCities(state.fields.country.id).finally(() => {\n        dispatch({ type: 'loading-cities', value: false });\n      });\n    },\n    [state.fields.country, actions.location]\n  );\n\n  useEffect(\n    function loadAreas() {\n      if (!hasAreas) return;\n\n      dispatch({ type: 'loading-areas', value: true });\n\n      /*\n       * ignoring typescript errors, because we make sure\n       * variables used have a value using hasAreas\n       */\n      actions.location\n        .getAreas({\n          // @ts-ignore\n          countryId: state.fields.country.id,\n          // @ts-ignore\n          cityId: state.fields.city.id,\n        })\n        .finally(() => {\n          dispatch({ type: 'loading-areas', value: false });\n        });\n    },\n    [state.fields.country, state.fields.city, hasAreas, actions.location]\n  );\n\n  return (\n    <div>\n      <h3>Country</h3>\n\n      <SelectCountry\n        dispatch={dispatch}\n        selectedCountry={state.fields.country}\n        isLoadingCountries={state.isLoadingCountries}\n      />\n\n      {errors.country?.length > 0 && (\n        <div style={{ color: 'red' }}>{errors.country}</div>\n      )}\n\n      <br />\n      <br />\n\n      <h3>City</h3>\n\n      <SelectCity\n        dispatch={dispatch}\n        selectedCity={state.fields.city}\n        isLoadingCities={state.isLoadingCities}\n        name=\"country\"\n      />\n\n      {errors.city?.length > 0 && (\n        <div style={{ color: 'red' }}>{errors.city}</div>\n      )}\n\n      <br />\n      <br />\n\n      {hasAreas && (\n        <>\n          <h3>Area</h3>\n\n          <SelectArea\n            dispatch={dispatch}\n            selectedArea={state.fields.area}\n            isLoadingAreas={state.isLoadingAreas}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { container } from './style';\nimport LocationForm from './components/LocationForm';\n\nexport default function Home() {\n  return (\n    <div css={container}>\n      <LocationForm />\n    </div>\n  );\n}\n","import { css } from '@emotion/core';\n\nexport const container = css`\n  height: calc(100% - 50px);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React from 'react';\n\nimport { container } from \"./style\";\nexport default function Welcome() {\n  return <div css={container}>\n      <h1>Welcome.</h1>\n  </div>;\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport Welcome from './pages/Welcome';\n\nexport default function () {\n  return (\n    <Switch>\n      <Route path=\"/home\" component={Home} />\n      <Route exact path=\"/\" component={Welcome} />\n    </Switch>\n  );\n}\n","import { css } from '@emotion/core';\nimport { TTheme } from 'src/styles/themes';\n\nexport const container = (theme: TTheme) => css`\n  display: flex;\n  justify-content: center;\n  height: 50px;\n  background: ${theme.colors.background};\n  box-shadow: ${theme.colors.shadow};\n\n  & > * {\n    margin: auto 15px;\n  }\n`;\n\nexport const icon = css`\n  display: flex;\n  font-size: 19px;\n`;\n","import React from 'react';\n\nexport default function SunIcon(props: any) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"currentColor\"\n      {...props}\n    >\n      <rect width=\"2\" height=\"2\" x=\"9\" y=\"2\"></rect>\n      <rect\n        width=\"2\"\n        height=\"2\"\n        x=\"13.88\"\n        y=\"4.051\"\n        transform=\"rotate(45.02 14.88 5.051)\"\n      ></rect>\n      <rect width=\"2\" height=\"2\" x=\"16\" y=\"9\"></rect>\n      <rect\n        width=\"2\"\n        height=\"2\"\n        x=\"13.949\"\n        y=\"14.019\"\n        transform=\"rotate(-135.02 14.95 15.019)\"\n      ></rect>\n      <rect width=\"2\" height=\"2\" x=\"9\" y=\"16\"></rect>\n      <rect\n        width=\"2\"\n        height=\"2\"\n        x=\"3.98\"\n        y=\"13.949\"\n        transform=\"rotate(-134.98 4.98 14.95)\"\n      ></rect>\n      <rect width=\"2\" height=\"2\" x=\"2\" y=\"9\"></rect>\n      <rect\n        width=\"2\"\n        height=\"2\"\n        x=\"4.05\"\n        y=\"4.121\"\n        transform=\"rotate(44.98 5.05 5.12)\"\n      ></rect>\n      <path d=\"M10,6 C7.8,6 6,7.8 6,10 C6,12.2 7.8,14 10,14 C12.2,14 14,12.2 14,10 C14,7.8 12.2,6 10,6 Z\"></path>\n    </svg>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useActions, useStore } from '@State';\nimport { container, icon } from './style';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon } from '@fortawesome/free-solid-svg-icons';\nimport SunIcon from '@Components/SunIcon';\n\nexport default function Header() {\n  const actions = useActions();\n  const appState = useStore();\n\n  return (\n    <nav css={(theme) => container(theme)}>\n      <Link to=\"/\">Welcome</Link>\n      <Link to=\"/home\">Home</Link>\n\n      <Link to=\"#\" onClick={actions.app.toggleDarkTheme}>\n        {appState.app.isDarkTheme ? (\n          <SunIcon css={icon} />\n        ) : (\n          <FontAwesomeIcon icon={faMoon} css={icon} />\n        )}\n      </Link>\n    </nav>\n  );\n}\n","export default {\n  colors: {\n    text: '#f0f2f5',\n    background: '#242526',\n    backgroundLight: '#333333',\n    shadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n  },\n};\n","export default {\n  colors: {\n    text: '#242526',\n    background: '#fff',\n    backgroundLight: '#f0f2f5',\n    shadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)',\n  },\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\n\nimport App from './App';\nimport { StateProvider } from '@State';\nimport { useStore } from '@State';\nimport { ThemeProvider } from 'emotion-theming';\nimport { darkTheme, lightTheme } from './styles/themes';\n\n/**\n * This component exists because:\n * ******************************\n * ThemeProvider needs state to determine the current theme,\n * so it must be nested within StateProvider\n *\n * App uses useTheme() to get theme for global styles,\n * so it needs to be nested under ThemeProvider\n *\n */\nfunction ThemeWrapper({ children }: any) {\n  const state = useStore();\n\n  /* Currently supporting only light and dark themes */\n  return (\n    <ThemeProvider theme={state.app.isDarkTheme ? darkTheme : lightTheme}>\n      {children}\n    </ThemeProvider>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider>\n      <ThemeWrapper>\n        <App />\n      </ThemeWrapper>\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { useTheme } from 'emotion-theming';\nimport { Global } from '@emotion/core';\n\nimport globalStyles from './styles/Global';\nimport Routes from './Routes';\nimport Header from '@Components/Header';\nimport { TTheme } from './styles/themes';\n\nexport default function App() {\n  const theme: TTheme = useTheme();\n\n  return (\n    <Router>\n      <Global styles={globalStyles(theme)} />\n\n      <Header />\n      <Routes />\n    </Router>\n  );\n}\n"],"sourceRoot":""}